#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist, TransformStamped
from nav_msgs.msg import Odometry
import serial
import math
import tf_transformations
from tf2_ros import TransformBroadcaster
import time

class CmdVelToSerial(Node):
    def __init__(self):
        super().__init__('cmdvel_to_serial_node')

        # Parameters
        self.declare_parameter('port', '/dev/ttyACM0')
        self.declare_parameter('baudrate', 115200)
        self.declare_parameter('wheel_separation', 0.20)   # meters
        self.declare_parameter('wheel_radius', 0.0325)     # meters
        self.declare_parameter('ticks_per_rev', 600)       # encoder resolution

        port = self.get_parameter('port').get_parameter_value().string_value
        baudrate = self.get_parameter('baudrate').get_parameter_value().integer_value

        # Serial connection
        try:
            self.ser = serial.Serial(port, baudrate, timeout=0.1)
            self.get_logger().info(f"Opened serial port {port} at {baudrate}")
        except serial.SerialException as e:
            self.get_logger().error(f"Could not open serial port: {e}")
            self.ser = None

        # ROS interfaces
        self.subscription = self.create_subscription(Twist, 'cmd_vel', self.cmdvel_callback, 10)
        self.odom_pub = self.create_publisher(Odometry, 'odom', 10)
        self.tf_broadcaster = TransformBroadcaster(self)

        # Robot state
        self.x = 0.0
        self.y = 0.0
        self.th = 0.0
        self.last_time = self.get_clock().now()

        self.last_left_ticks = None
        self.last_right_ticks = None

        # Timer to poll serial feedback
        self.create_timer(0.05, self.read_encoders)

    def cmdvel_callback(self, msg: Twist):
        if self.ser is None:
            return

        linear = msg.linear.x
        angular = msg.angular.z

        wheel_sep = self.get_parameter('wheel_separation').get_parameter_value().double_value
        wheel_r   = self.get_parameter('wheel_radius').get_parameter_value().double_value

        v_left  = (linear - (angular * wheel_sep / 2.0)) / wheel_r
        v_right = (linear + (angular * wheel_sep / 2.0)) / wheel_r

        # Scale (example: rad/s to PWM)
        left_cmd  = int(v_left * 6.315789)
        right_cmd = int(v_right * 6.315789)

        cmd_str = f"V {left_cmd} {right_cmd}\n"
        self.ser.write(cmd_str.encode('utf-8'))

    def read_encoders(self):
        if self.ser is None or not self.ser.in_waiting:
            return

        try:
            line = self.ser.readline().decode('utf-8').strip()
            if not line.startswith("E"):
                return

            _, left_ticks, right_ticks = line.split()
            left_ticks = int(left_ticks)
            right_ticks = int(right_ticks)

            if self.last_left_ticks is None:
                self.last_left_ticks = left_ticks
                self.last_right_ticks = right_ticks
                return

            # Delta ticks
            d_left = left_ticks - self.last_left_ticks
            d_right = right_ticks - self.last_right_ticks
            self.last_left_ticks = left_ticks
            self.last_right_ticks = right_ticks

            # Convert ticks â†’ distance
            ticks_per_rev = self.get_parameter('ticks_per_rev').get_parameter_value().integer_value
            wheel_r = self.get_parameter('wheel_radius').get_parameter_value().double_value
            wheel_sep = self.get_parameter('wheel_separation').get_parameter_value().double_value

            d_left_m = (2 * math.pi * wheel_r) * (d_left / ticks_per_rev)
            d_right_m = (2 * math.pi * wheel_r) * (d_right / ticks_per_rev)

            # Kinematics
            d_center = (d_left_m + d_right_m) / 2.0
            d_theta = (d_right_m - d_left_m) / wheel_sep

            dt = (self.get_clock().now() - self.last_time).nanoseconds / 1e9
            self.last_time = self.get_clock().now()

            self.x += d_center * math.cos(self.th + d_theta / 2.0)
            self.y += d_center * math.sin(self.th + d_theta / 2.0)
            self.th += d_theta

            vx = d_center / dt
            vth = d_theta / dt

            # Publish odometry
            odom = Odometry()
            odom.header.stamp = self.get_clock().now().to_msg()
            odom.header.frame_id = "odom"
            odom.child_frame_id = "base_link"

            odom.pose.pose.position.x = self.x
            odom.pose.pose.position.y = self.y
            odom.pose.pose.orientation.z = math.sin(self.th / 2.0)
            odom.pose.pose.orientation.w = math.cos(self.th / 2.0)

            odom.twist.twist.linear.x = vx
            odom.twist.twist.angular.z = vth

            self.odom_pub.publish(odom)

            # Publish TF
            t = TransformStamped()
            t.header.stamp = odom.header.stamp
            t.header.frame_id = "odom"
            t.child_frame_id = "base_link"
            t.transform.translation.x = self.x
            t.transform.translation.y = self.y
            t.transform.rotation = odom.pose.pose.orientation
            self.tf_broadcaster.sendTransform(t)

        except Exception as e:
            self.get_logger().warn(f"Error parsing encoder data: {e}")

def main(args=None):
    rclpy.init(args=args)
    node = CmdVelToSerial()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        if node.ser is not None:
            node.ser.close()
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
